//=============================================================================
// コントロール処理 [control_rise.cpp]
// Author : 村元翼
//=============================================================================
#include "control_rise.h"
#include "effect.h"
#include <random>

//=============================================================================
// マクロ定義
//=============================================================================
#define MOVE_SPEED (1.5f)		// 移動スピード

//=============================================================================
// コンストラクタ
//=============================================================================
CControlRise::CControlRise()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CControlRise::~CControlRise()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CControlRise::Init()
{
	// 噴射エフェクトの角度の最小値と最大値(0〜360)
	const float minRange = 0.0f;
	const float maxRange = D3DX_PI * 2;
	float fAngle;

	std::random_device Randseed;												// 乱数生成器でシード値を完全ランダムに初期化する
	std::mt19937_64 mt(Randseed());												// 疑似乱数を作り出す
	std::uniform_real_distribution<float> Dist(minRange, maxRange);				// 指定した範囲内の数値を等確率で返す(最小値以上、最大値"未満")
	fAngle = Dist(mt);

#ifdef _DEBUG
	float fDegree = D3DXToDegree(fAngle);										// デバッグ時に角度を確認するための処理
#endif

	// 広がる方向を求める
	m_move.x = cosf(fAngle);
	m_move.z = sinf(fAngle);
	m_move.y = 1.0f;
	m_move *= MOVE_SPEED;
	
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CControlRise::Uninit()
{

}

//=============================================================================
// 更新処理
//=============================================================================
void CControlRise::Update(CScene *pObject)
{
	// インスタンス
	CEffect *pEffect = nullptr;
	if (!pEffect)
	{
		// オブジェクトをエフェクトクラスにキャスト
		pEffect = (CEffect*)pObject;
		if (pEffect)
		{
			// 上にふわふわ上昇する処理
			D3DXVECTOR3 pos = pEffect->GetPos();
			pos += m_move;		// 上昇していく
			pEffect->SetPos(pos);
		}
	}
}

//=============================================================================
// 生成処理
//=============================================================================
CControlRise *CControlRise::Create()
{
	// インスタンスの生成
	CControlRise *pControlRise = nullptr;
	if (!pControlRise)
	{
		pControlRise = new CControlRise();
		if (pControlRise)
		{
			pControlRise->Init();	// 初期化
		}
	}
	return pControlRise;
}

